template:
  name: Trigger Jenkins Jobs
  type: Stage
  projectIdentifier: chaostestingprod
  orgIdentifier: default
  spec:
    type: Custom
    spec:
      execution:
        steps:
          - step:
              type: ShellScript
              name: Trigger And Monitor Jenkins Job
              identifier: Trigger_And_Monitor_Jenkins_Job
              spec:
                shell: Bash
                executionTarget: {}
                source:
                  type: Inline
                  spec:
                    script: |
                      #!/usr/bin/env bash
                      set -euo pipefail

                      # --------- Ensure jq is available ----------
                      if ! command -v jq >/dev/null 2>&1; then
                        echo "[Info]: jq not found, attempting to install…"

                        install_jq_pm() {
                          if command -v apt-get >/dev/null 2>&1; then
                            apt-get update && apt-get install -y jq
                          elif command -v yum >/dev/null 2>&1; then
                            yum install -y jq
                          elif command -v apk >/dev/null 2>&1; then
                            apk add --no-cache jq
                          else
                            return 1
                          fi
                        }

                        install_jq_binary() {
                          local url="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
                          local dest="$HOME/.local/bin/jq"
                          mkdir -p "$(dirname "$dest")"
                          if curl -sSL "$url" -o "$dest"; then
                            chmod +x "$dest"
                            export PATH="$HOME/.local/bin:$PATH"
                            return 0
                          else
                            return 1
                          fi
                        }

                        if install_jq_pm; then
                          echo "[Info]: jq installed via package manager ($(jq --version))"
                        elif install_jq_binary; then
                          echo "[Info]: jq downloaded to ~/.local/bin and available ($(jq --version))"
                        else
                          echo "[Error]: Failed to install jq. Please install it manually and re-run."
                          exit 1
                        fi
                      else
                        echo "[Info]: jq is already installed ($(jq --version))"
                      fi

                      # --------- Jenkins trigger & monitor logic ----------
                      JENKINS_URL="<+pipeline.variables.JENKINS_URL>"
                      JENKINS_USER="<+pipeline.variables.JENKINS_USER>"
                      JENKINS_TOKEN="<+pipeline.variables.JENKINS_TOKEN>"
                      JOB_NAME="<+pipeline.variables.JOB_NAME>"
                      PARAMS="<+pipeline.variables.JOB_PARAMS>"

                      old_build=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                        "$JENKINS_URL/job/$JOB_NAME/api/json" \
                      | jq -r '.lastBuild.number // 0')
                      echo "[Info]: Current lastBuild for '$JOB_NAME' is #$old_build"

                      crumb=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                        "$JENKINS_URL/crumbIssuer/api/json" \
                      | jq -r .crumb)
                      echo "[Info]: Using crumb: $crumb"

                      if [[ -n "$PARAMS" ]]; then
                        endpoint="buildWithParameters?$PARAMS"
                      else
                        endpoint="build"
                      fi

                      curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                           -H "Jenkins-Crumb:$crumb" \
                           -X POST \
                           "$JENKINS_URL/job/$JOB_NAME/$endpoint" \
                           >/dev/null
                      echo "↪ Triggered '$JOB_NAME'"

                      echo "[Wait]: Waiting for a new build (> #$old_build)…"
                      new_build=$old_build
                      while (( new_build <= old_build )); do
                        sleep 2
                        new_build=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                          "$JENKINS_URL/job/$JOB_NAME/api/json" \
                        | jq -r '.lastBuild.number // 0')
                      done
                      echo "[Info]: Detected new build: #$new_build"

                      while :; do
                        info=$(curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                          "$JENKINS_URL/job/$JOB_NAME/$new_build/api/json")
                        building=$(jq -r '.building' <<<"$info")
                        result=$(jq -r '.result // empty' <<<"$info")
                        ts=$(date '+%H:%M:%S')

                        if [[ "$building" == "true" ]]; then
                          echo "[$ts] RUNNING"
                        elif [[ -n "$result" ]]; then
                          echo "[$ts] DONE → $result"
                          break
                        else
                          echo "[$ts] PENDING"
                        fi
                        sleep 5
                      done

                      echo
                      echo "──── Console output for $JOB_NAME #$new_build ────"
                      curl -s -u "$JENKINS_USER:$JENKINS_TOKEN" \
                           "$JENKINS_URL/job/$JOB_NAME/$new_build/consoleText"
                      echo "────────────────────────────────────────────────────"
                environmentVariables: []
                outputVariables: []
                delegateSelectors:
                  - demo-cluster-02-delegate
              timeout: 10m
  identifier: Trigger_Jenkins_Jobs
  versionLabel: v1
