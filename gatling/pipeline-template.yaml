template:
  name: gatling load run step
  identifier: gatling_load_run_step
  versionLabel: v1
  type: Step
  projectIdentifier: ChaosDev
  orgIdentifier: default
  tags: {}
  spec:
    timeout: 10m
    type: ShellScript
    spec:
      shell: Bash
      executionTarget: {}
      delegateSelectors: <+input>
      source:
        type: Inline
        spec:
          script: |
            #!/bin/bash
            set -euo pipefail

            # --------- Ensure jq is available ----------
            if ! command -v jq >/dev/null 2>&1; then
              echo "[Info]: jq not found, attempting to installâ€¦"

              install_jq_pm() {
                if command -v apt-get >/dev/null 2>&1; then
                  apt-get update && apt-get install -y jq
                elif command -v yum >/dev/null 2>&1; then
                  yum install -y jq
                elif command -v apk >/dev/null 2>&1; then
                  apk add --no-cache jq
                else
                  return 1
                fi
              }

              install_jq_binary() {
                local url="https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
                local dest="$HOME/.local/bin/jq"
                mkdir -p "$(dirname "$dest")"
                if curl -sSL "$url" -o "$dest"; then
                  chmod +x "$dest"
                  export PATH="$HOME/.local/bin:$PATH"
                  return 0
                else
                  return 1
                fi
              }

              if install_jq_pm; then
                echo "[Info]: jq installed via package manager ($(jq --version))"
              elif install_jq_binary; then
                echo "[Info]: jq downloaded to ~/.local/bin and available ($(jq --version))"
              else
                echo "[Error]: Failed to install jq. Please install it manually and re-run."
                exit 1
              fi
            else
              echo "[Info]: jq is already installed ($(jq --version))"
            fi

            function phase_string {
              local num=$1
              if [ $num == 0 ]; then
                echo "Building"
              elif [ $num == 1 ]; then
                echo "Deploying"
              elif [ $num == 2 ]; then
                echo "Deployed"
              elif [ $num == 3 ]; then
                echo "Injecting"
              elif [ $num == 4 ]; then
                echo "Completed"
              else
                echo "Unknown"
              fi
            }

            #simulation_id=<+stage.variables.simulation_id>
            #token=<+stage.variables.token>

            # return error if simulation id is empty
            if [ -z $simulation_id ]; then
              echo "[error]: simulation_id is empty"
              exit 1
            fi

            # return error if token is empty
            if [ -z $token ]; then
              echo "[error]: token is empty"
              exit 1
            fi

            # starting simulation
            echo "[info]: starting simulation $simulation_id"

            start_simulation_response=$(curl -s -w "\n%{http_code}" -X POST \
              https://api.gatling.io/api/public/simulations/start?simulation=$simulation_id \
              -H "accept: application/json" \
              -H "authorization: $token" \
              -H "Content-Type: application/json" \
              -d '{}')

            start_simulation_status_code=$(tail -n 1 <<< "$start_simulation_response")
            if [[ "$start_simulation_status_code" -ne 200 ]]; then
              echo "[error]: starting simulation failed with status code: $start_simulation_status_code"
              exit 1
            fi

            start_simulation_body=$(sed '$d' <<< "$start_simulation_response")
            run_id=$(echo $start_simulation_body | jq .runId)
            run_id=$(echo "$run_id" | tr -d '"')
            # return error if run id is empty
            if [ -z $run_id ]; then
              echo "[error]: run id is empty"
              exit 1
            fi

            simulation_run_phase=0
            while [ $simulation_run_phase -le 3 ]; do

            simulation_run_response=$(curl -s -w "\n%{http_code}" -X GET \
              https://api.gatling.io/api/public/run?run=$run_id \
              -H "accept: application/json" \
              -H "authorization: $token" \
              -H "Content-Type: application/json" \
              -d '{}')

            simulation_run_status_code=$(tail -n 1 <<< "$simulation_run_response")
            if [[ "$simulation_run_status_code" -ne 200 ]]; then
              echo "[error]: get simulation run failed with status code: $simulation_run_status_code"
              exit 1
            fi

            simulation_run_body=$(sed '$d' <<< "$simulation_run_response")
            simulation_run_phase=$(echo $simulation_run_body | jq .status)
            if [ $simulation_run_phase == null ]; then
              simulation_run_phase=0
            fi
            phase_string=$(phase_string $simulation_run_phase)
            echo "[info]: simulation run $run_id phase: [$simulation_run_phase] $phase_string"

            done
      environmentVariables:
        - name: simulation_id
          type: String
          value: <+input>
        - name: token
          type: Secret
          value: <+input>
      outputVariables: []
